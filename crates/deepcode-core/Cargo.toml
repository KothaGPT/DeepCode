[package]
authors = ["nathanielsimard <nathaniel.simard.42@gmail.com>"]
categories = ["science", "no-std", "embedded", "wasm"]
description = "Flexible and Comprehensive Deep Learning Framework in Rust"
documentation = "https://docs.rs/deepcode-core"
edition.workspace = true
keywords = ["deep-learning", "machine-learning", "tensor", "pytorch", "ndarray"]
license.workspace = true
name = "deepcode-core"
readme.workspace = true
repository = "https://github.com/kothagpt/deepcode/tree/main/crates/deepcode-core"
version.workspace = true

[lints]
workspace = true

[features]
default = [
    "std",
    "deepcode-common/default",
    "deepcode-dataset?/default",
    "deepcode-tensor/default",
]
doc = [
    "std",
    "dataset",
    "audio",
    # Doc features
    "deepcode-common/doc",
    "deepcode-dataset/doc",
    "deepcode-tensor/doc",
]
dataset = ["deepcode-dataset"]

network = ["deepcode-common/network"]
sqlite = ["deepcode-dataset?/sqlite"]
sqlite-bundled = ["deepcode-dataset?/sqlite-bundled"]
std = [
    "bincode/std",
    "deepcode-common/std",
    "deepcode-tensor/std",
    "flate2",
    "half/std",
    "log",
    "rand/std",
    "rmp-serde",
    "serde/std",
    "serde_json/std",
    "num-traits/std",
]
vision = ["deepcode-vision", "deepcode-dataset?/vision", "deepcode-common/network"]
audio = ["deepcode-dataset?/audio"]

# Custom deserializer for Record that is helpful for importing data, such as PyTorch pt files.
record-item-custom-serde = ["thiserror"]

# Serialization formats
experimental-named-tensor = ["deepcode-tensor/experimental-named-tensor"]

test-cuda = [
    "deepcode-cuda/default",
] # To use cuda during testing, default uses ndarray.
test-rocm = [
    "deepcode-rocm/default",
] # To use hip during testing, default uses ndarray.
test-tch = [
    "deepcode-tch/default",
] # To use tch during testing, default uses ndarray.
test-wgpu = [
    "deepcode-wgpu/default",
] # To use wgpu during testing, default uses ndarray.
test-vulkan = [
    "test-wgpu",
    "deepcode-wgpu/vulkan",
] # To use wgpu-spirv during testing, default uses ndarray.
test-metal = [
    "test-wgpu",
    "deepcode-wgpu/metal",
] # To use wgpu-spirv during testing, default uses ndarray.

# Memory checks are disabled by default
test-memory-checks = ["deepcode-fusion/memory-checks"]

[dependencies]

# ** Please make sure all dependencies support no_std when std is disabled **

deepcode-common = { path = "../deepcode-common", version = "0.1.0", default-features = false }
deepcode-dataset = { path = "../deepcode-dataset", version = "0.1.0", optional = true, default-features = false }
deepcode-derive = { path = "../deepcode-derive", version = "0.1.0" }
deepcode-tensor = { path = "../deepcode-tensor", version = "0.1.0", default-features = false }
deepcode-vision = { path = "../deepcode-vision", version = "0.1.0", optional = true, default-features = false }

data-encoding = { workspace = true }
uuid = { workspace = true }

derive-new = { workspace = true }
log = { workspace = true, optional = true }
rand = { workspace = true }

# The same implementation of HashMap in std but with no_std support (only alloc crate is needed)
hashbrown = { workspace = true, features = ["serde"] } # no_std compatible

# Serialize Deserialize
flate2 = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"] }

ahash = { workspace = true }
bincode = { workspace = true }
half = { workspace = true }
num-traits = { workspace = true }
rmp-serde = { workspace = true, optional = true }
serde_json = { workspace = true, features = ["alloc"] } #Default enables std
spin = { workspace = true }                             # Using in place of use std::sync::Mutex when std is disabled
thiserror = { workspace = true, optional = true }

[target.'cfg(target_has_atomic = "ptr")'.dependencies]
regex = { workspace = true }

# FOR TESTING
deepcode-cuda = { path = "../deepcode-cuda", version = "0.1.0", optional = true, default-features = false }
deepcode-rocm = { path = "../deepcode-rocm", version = "0.1.0", optional = true, default-features = false }
deepcode-remote = { path = "../deepcode-remote", version = "0.1.0", default-features = false, optional = true }
deepcode-router = { path = "../deepcode-router", version = "0.1.0", default-features = false, optional = true }
deepcode-tch = { path = "../deepcode-tch", version = "0.1.0", optional = true }
deepcode-wgpu = { path = "../deepcode-wgpu", version = "0.1.0", optional = true, default-features = false }
deepcode-fusion = { path = "../deepcode-fusion", version = "0.1.0", optional = true }

[target.'cfg(not(target_has_atomic = "ptr"))'.dependencies]
portable-atomic-util = { workspace = true }
portable-atomic = { workspace = true, features = ["unsafe-assume-single-core"] }

[dev-dependencies]
deepcode-ndarray = { path = "../deepcode-ndarray", version = "0.1.0" }
deepcode-autodiff = { path = "../deepcode-autodiff", version = "0.1.0" }
deepcode-dataset = { path = "../deepcode-dataset", version = "0.1.0", features = [
    "fake",
] }
rstest = { workspace = true }

[package.metadata.docs.rs]
features = ["doc"]
rustdoc-args = ["--cfg", "docsrs"]
